[{"title":"High Level Overview","type":0,"sectionRef":"#","url":"/Me3Keysmith-Documentation/high-level-overview","content":"","keywords":""},{"title":"Wallet Generation​","type":1,"pageTitle":"High Level Overview","url":"/Me3Keysmith-Documentation/high-level-overview#wallet-generation","content":"The diagram below describes the backend process when creating a Me3 wallet for the end-user.  "},{"title":"Retrieving Wallets​","type":1,"pageTitle":"High Level Overview","url":"/Me3Keysmith-Documentation/high-level-overview#retrieving-wallets","content":"Oftentimes in Web2.0, we face a choice: Login or Sign up. At Me3, we believe that we can further streamline the process by checking if they are an existing user at our backend. If the user already has a Me3 Wallet, we Retrieve the encrypted wallets from the Me3 servers, into the DApp.Retrieve the Me3 Recovery Key from the Google Drive, into the Dapp.Decrypt the wallets in the DApp.  That way, we enhance the user experience of both new and existing users to just one click. "},{"title":"Signing Transactions​","type":1,"pageTitle":"High Level Overview","url":"/Me3Keysmith-Documentation/high-level-overview#signing-transactions","content":"As part of our value-added services, we have abstracted away the need for you to write code for transaction signing purposes. Keysmith now offers a method for you to obtain signed transactions with one click. Simply provide the signTx() method with a transaction object, and we will return the signed transaction to you after the user approves the Google prompt.  "},{"title":"API Specifications","type":0,"sectionRef":"#","url":"/Me3Keysmith-Documentation/api-specifications","content":"","keywords":""},{"title":"Me3 constructor​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#me3-constructor","content":"The main class handling all of Keysmith functionalities "},{"title":"Parameters​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#parameters","content":"config: Me3Config interface ME3Config { endpoint: string; partnerId: string; redirect_url: string; }  "},{"title":"getAuthLink(redirectUrl)​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#getauthlinkredirecturl","content":"This method generates Google SSO url to enable the user go perform Google SSO with Me3 to initiate the onboarding process "},{"title":"Parameters​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#parameters-1","content":"redirectUrl: string The URL to redirect the user upon successful completion of Google SSO "},{"title":"Returns​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#returns","content":"string The URL you should redirect your user to perform Google SSO with Me3 "},{"title":"getAuthToken(code, state, sessionState)​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#getauthtokencode-state-sessionstate","content":"This method authenticated your app's Me3 instance against Me3 servers using OAuth2. The parameters required for this method are usually appended to the redirectUrl when the user successfully completes Google SSO. danger You must call this method prior to performing wallet retrievals or transaction signing "},{"title":"Parameters​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#parameters-2","content":"code: stringstate: stringsessionState: string "},{"title":"Returns​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#returns-1","content":"None "},{"title":"getWallets()​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#getwallets","content":"This method checks if the Google signed-on user has an existing Me3 recovery key in their Google Drive. If it does not have one, it undergoes the Wallet Generation process. After which, it computes the decryption of the encrypted wallets in the DApp, and returns the wallets. "},{"title":"Parameters​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#parameters-3","content":"None "},{"title":"Returns​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#returns-2","content":"Wallet[] List of user's Wallet Example Value const wallets: Wallet[] = [ { chainName: &quot;eth&quot;, walletName: &quot;ethereum-1&quot;, walletAddress: &quot;0xb8272B0eAe5B5Ea681AcB33401b33A2c2D6db351&quot;, secret: &quot;0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db&quot;, }, { chainName: &quot;Polygon&quot;, walletName: &quot;3rd_Polygon&quot;, walletAddress: &quot;0xb8272B0eAe5B5Ea681AcB33401b33A2c2D6db351&quot;, secret: &quot;0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db&quot;, }, ];  Model interface Wallet { chainName: string; walletName: string; walletAddress: string; secret: string; }  "},{"title":"signTx(wallet, tx)​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#signtxwallet-tx","content":"This method computes a signed EVM transaction payload for broadcast into EVM blockchains, based on the existing Me3 session and desired transaction parameters. "},{"title":"Parameters​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#parameters-4","content":"wallet: Wallet interfacetx: Object Objects follow the typical web3.eth pattern of transaction objects. Please refer to https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#eth-sendtransaction for a detailed view into forming such transaction objects. Model interface Wallet { chainName: string; walletName: string; walletAddress: string; secret: string; }  "},{"title":"Returns​","type":1,"pageTitle":"API Specifications","url":"/Me3Keysmith-Documentation/api-specifications#returns-3","content":"string The string output is a transaction hash that is ready for broadcast to compatible chains. "},{"title":"Quick Start Guide","type":0,"sectionRef":"#","url":"/Me3Keysmith-Documentation/quick-start-guide","content":"","keywords":""},{"title":"Pre-requisites:​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#pre-requisites","content":"Signed NDA with Me3 -&gt; POC: @Jovyn YeoA JS-based project: Backend: NodejsFrontend: Frameworks that support server-side rendering "},{"title":"Credentials​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#credentials","content":"You will be furnished with the following once pre-requisite 1 has been met: NPM access tokenVariables to be used in the following steps of implementation endpointpartnerId "},{"title":"Setup​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#setup","content":"Getting access to Keysmith In your project, create a file named .npmrc and paste the NPM access token furnished to youAdd this file in your .gitignore and do not commit this file Run npm i @me3technology/keysmithIn your project instantiate Me3 instance me3.js import Me3 from '@me3technology/keysmith'; const CONFIG = { endpoint: &quot;use endpoint provided&quot; partnerId: &quot;use partner id provided&quot;, redirect_uris: &quot;https://www.me3.io/welcome&quot; } // Please refer to API Specifications section for types // Always use the same instance of Me3 object const me3 = new Me3(CONFIG)  "},{"title":"Usage​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#usage","content":""},{"title":"1. Generate Google SSO link for users​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#1-generate-google-sso-link-for-users","content":"To begin onboarding users to Me3, you need to direct users to perform Google SSO to grant Me3 access to user's Google DriveMe3.getAuthLink('http://www.example.me3.io') Args: redirectUrl: string -&gt; The url to redirect users to after users performs Google SSO Returns: string -&gt; Google auth url import { me3 } from &quot;./me3.js&quot;; const authUrl = await me3.getAuthLink(&quot;https://www.example.io&quot;); // On your clientside, please redirect the user to authUrl to perform Google SSO  "},{"title":"2. Authenticate your Me3 instance with Me3 backend​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#2-authenticate-your-me3-instance-with-me3-backend","content":"❗️ Pre-requisite: Step 1 completed Me3 backend uses OAuth2 bearer tokens to authenticate API requestsMe3.getAuthToken(code, state, sessionState) Args code: stringstate: stringsesssionState: string Returns boolean -&gt; Whether authentication was successful import { me3 } from &quot;./me3.js&quot;; // How to get the args needed // - From step 1: After user successfully performed Google SSO, they wouldve been redirected to your provisioned redirectURL // - Please extract the query parameters from appended on the url const url = new URL(&quot;redirected-url-from-step-1&quot;); const code = new URLSearchParams(url.code); const state = new URLSearchParams(url.state); const sessionState = new URLSearchParams(url.sessionState); const success = await me3.getAuthToken(code, state, sessionState);  "},{"title":"3. Getting Users Wallets​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#3-getting-users-wallets","content":"❗️ Pre-requisite: Step 2 completed Keysmith handles the retrieval/creation of user wallets for youThese wallet details should be persisted in your application during the lifetime of the user's session so that they can be utilised for transaction during the user journeyMe3.getWallets() Returns An array of users Wallets for all our supported chains import { me3 } from &quot;./me3.js&quot;; const userWallets = await me3.getWallets();  "},{"title":"4. Transaction Signing​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#4-transaction-signing","content":"❗️ Pre-requisite: Step 3 completed Keysmiths handles the transaction signing for EVM-based chainsAll that is required from your end is to identify the wallet by which the user would like to transaction and construct the Transaction object For reference on a Transaction: https://docs.ethers.org/v5/api/utils/transactions/ import * as ethers from &quot;ethers&quot;; import { me3 } from &quot;./me3.js&quot;; // retrieve this wallet from step 3 const walletToTransaction = { chainName: &quot;eth&quot;, walletName: &quot;ethereum-1&quot;, walletAddress: &quot;0xb8272B0eAe5B5Ea681AcB33401b33A2c2D6db351&quot;, secret: &quot;0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db&quot;, }; const tx = { to: &quot;0x8ba1f109551bD432803012645Ac136ddd64DBA72&quot;, value: ethers.utils.parseEther(&quot;0.5&quot;), }; const signedTx = await me3.signTx(walletToTransaction, tx); // signedTx can now be sent to the blockchain  "},{"title":"Sample App:​","type":1,"pageTitle":"Quick Start Guide","url":"/Me3Keysmith-Documentation/quick-start-guide#sample-app","content":"If the above is still confusing, feel free to install the following package to try out a sample app with RESTful API implemented: info npm i @me3technology/sample  "}]