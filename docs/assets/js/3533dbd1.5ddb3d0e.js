"use strict";(self.webpackChunkme_3=self.webpackChunkme_3||[]).push([[104],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3,title:"Quick Start Guide"},l=void 0,o={unversionedId:"quick-start-guide",id:"quick-start-guide",title:"Quick Start Guide",description:"To help you get started with Keysmith",source:"@site/docs/quick-start-guide.md",sourceDirName:".",slug:"/quick-start-guide",permalink:"/me3keysmith-documentation/quick-start-guide",draft:!1,editUrl:"https://github.com/AvartaDev/Me3Keysmith/tree/blob/main/documentation/docs/quick-start-guide.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Quick Start Guide"},sidebar:"mainSidebar",previous:{title:"High Level Overview",permalink:"/me3keysmith-documentation/high-level-overview"},next:{title:"API Specifications",permalink:"/me3keysmith-documentation/api-specifications"}},s={},u=[{value:"Pre-requisites:",id:"pre-requisites",level:2},{value:"Credentials",id:"credentials",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"1. Generate Google SSO link for users",id:"1-generate-google-sso-link-for-users",level:3},{value:"2. Authenticate your Me3 instance with Me3 backend",id:"2-authenticate-your-me3-instance-with-me3-backend",level:3},{value:"3. Getting Users Wallets",id:"3-getting-users-wallets",level:3},{value:"4. Transaction Signing",id:"4-transaction-signing",level:3},{value:"Sample App:",id:"sample-app",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"To help you get started with Keysmith"))),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Signed NDA with Me3 -> POC: ",(0,r.kt)("a",{parentName:"li",href:"mailto:jovyn@me3.io"},"@Jovyn Yeo")),(0,r.kt)("li",{parentName:"ol"},"A JS-based project:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Backend: Nodejs"),(0,r.kt)("li",{parentName:"ul"},"Frontend: Frameworks that support server-side rendering")))),(0,r.kt)("h2",{id:"credentials"},"Credentials"),(0,r.kt)("p",null,"You will be furnished with the following once pre-requisite 1 has been met:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NPM access token"),(0,r.kt)("li",{parentName:"ul"},"Variables to be used in the following steps of implementation",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"partnerId"))))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Getting access to Keysmith",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In your project, create a file named .npmrc and paste the NPM access token furnished to you"),(0,r.kt)("li",{parentName:"ul"},"Add this file in your ",(0,r.kt)("em",{parentName:"li"},".gitignore")," and do not commit this file"))),(0,r.kt)("li",{parentName:"ol"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"npm i @me3technology/keysmith")),(0,r.kt)("li",{parentName:"ol"},"In your project instantiate ",(0,r.kt)("inlineCode",{parentName:"li"},"Me3")," instance")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="me3.js"',title:'"me3.js"'},'import Me3 from \'@me3technology/keysmith\';\n\nconst CONFIG = {\n    endpoint: "use endpoint provided"\n    partnerId: "use partner id provided",\n    redirect_uris: "https://www.me3.io/welcome"\n}\n\n// Please refer to API Specifications section for types\n// Always use the same instance of Me3 object\nconst me3 = new Me3(CONFIG)\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"1-generate-google-sso-link-for-users"},"1. Generate Google SSO link for users"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To begin onboarding users to Me3, you need to direct users to perform Google SSO to grant Me3 access to user's Google Drive"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Me3.getAuthLink('http://www.example.me3.io')"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Args:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redirectUrl"),": string -> The url to redirect users to after users performs Google SSO"))),(0,r.kt)("li",{parentName:"ul"},"Returns:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"string -> Google auth url")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { me3 } from "./me3.js";\n\nconst authUrl = await me3.getAuthLink("https://www.example.io");\n// On your clientside, please redirect the user to authUrl to perform Google SSO\n')),(0,r.kt)("h3",{id:"2-authenticate-your-me3-instance-with-me3-backend"},"2. Authenticate your Me3 instance with Me3 backend"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"\u2757\ufe0f Pre-requisite: Step 1 completed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Me3 backend uses OAuth2 bearer tokens to authenticate API requests"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Me3.getAuthToken(code, state, sessionState)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Args",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"code"),": string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state"),": string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sesssionState"),": string"))),(0,r.kt)("li",{parentName:"ul"},"Returns",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"boolean -> Whether authentication was successful")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { me3 } from "./me3.js";\n\n// How to get the args needed\n//   - From step 1: After user successfully performed Google SSO, they wouldve been redirected to your provisioned redirectURL\n//   - Please extract the query parameters from appended on the url\nconst url = new URL("redirected-url-from-step-1");\n\nconst code = new URLSearchParams(url.code);\nconst state = new URLSearchParams(url.state);\nconst sessionState = new URLSearchParams(url.sessionState);\n\nconst success = await me3.getAuthToken(code, state, sessionState);\n')),(0,r.kt)("h3",{id:"3-getting-users-wallets"},"3. Getting Users Wallets"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"\u2757\ufe0f Pre-requisite: Step 2 completed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keysmith handles the retrieval/creation of user wallets for you"),(0,r.kt)("li",{parentName:"ul"},"These wallet details should be persisted in your application during the lifetime of the user's session so that they can be utilised for transaction during the user journey"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Me3.getWallets()"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"An array of users ",(0,r.kt)("inlineCode",{parentName:"li"},"Wallets")," for all our supported chains")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { me3 } from "./me3.js";\n\nconst userWallets = await me3.getWallets();\n')),(0,r.kt)("h3",{id:"4-transaction-signing"},"4. Transaction Signing"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"\u2757\ufe0f Pre-requisite: Step 3 completed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keysmiths handles the transaction signing for EVM-based chains"),(0,r.kt)("li",{parentName:"ul"},"All that is required from your end is to identify the wallet by which the user would like to transaction and construct the ",(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")," object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For reference on a ",(0,r.kt)("inlineCode",{parentName:"li"},"Transaction"),": ",(0,r.kt)("a",{parentName:"li",href:"https://docs.ethers.org/v5/api/utils/transactions/"},"https://docs.ethers.org/v5/api/utils/transactions/"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import * as ethers from "ethers";\n\nimport { me3 } from "./me3.js";\n\n// retrieve this wallet from step 3\nconst walletToTransaction = {\n  chainName: "eth",\n  walletName: "ethereum-1",\n  walletAddress: "0xb8272B0eAe5B5Ea681AcB33401b33A2c2D6db351",\n  secret: "0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db",\n};\n\nconst tx = {\n  to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",\n  value: ethers.utils.parseEther("0.5"),\n};\n\nconst signedTx = await me3.signTx(walletToTransaction, tx);\n// signedTx can now be sent to the blockchain\n')),(0,r.kt)("h2",{id:"sample-app"},"Sample App:"),(0,r.kt)("p",null,"If the above is still confusing, feel free to install the following package to try out a sample app with RESTful API implemented:"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @me3technology/sample\n"))))}c.isMDXComponent=!0}}]);